(function(){var app=angular.module("experiments.controllers",["ang-dialogs","angular.backtop","experiments.services.experiment-list","experiments.directives.experiment-views","analysis.services.analysis-list","templates.directives.template","ui.bootstrap"]);app.directive("ngEnter",function(){return function(scope,element,attrs){element.bind("keydown keypress",function(event){if(event.which===13){scope.$apply(function(){scope.$eval(attrs.ngEnter)});event.preventDefault()}})}});app.controller("ExperimentListController",function($rootScope,$scope,$http,$stateParams,$dialogs,APP_EVENTS,ExperimentList,AnalysisList){this.retrieveExperimentsData=function(group,force){$scope.isLoading=true;if(ExperimentList.getOld()>1||force){$http($rootScope.getHttpRequestConfig("POST","experiment-list",{headers:{"Content-Type":"application/json"},data:$rootScope.getCredentialsParams()})).then(function successCallback(response){$scope.isLoading=false;$scope.experiments=ExperimentList.setExperiments(response.data).getExperiments();$scope.tags=ExperimentList.updateTags().getTags();$scope.filteredExperiments=$scope.experiments.length;if(window.innerWidth>1500){$scope.visibleExperiments=14}else if(window.innerWidth>1200){$scope.visibleExperiments=10}else{$scope.visibleExperiments=6}$scope.visibleExperiments=Math.min($scope.filteredExperiments,$scope.visibleExperiments);if(Cookies.get("currentExperimentID")){$scope.currentExperiment=ExperimentList.getExperiment(Cookies.get("currentExperimentID"))}},function errorCallback(response){$scope.isLoading=false;debugger;var message="Failed while retrieving the list of studies.";$dialogs.showErrorDialog(message,{logMessage:message+" at ExperimentListController:retrieveExperimentsData."});console.error(response.data)})}else{$scope.experiments=ExperimentList.getExperiments();$scope.tags=ExperimentList.getTags();$scope.filteredExperiments=$scope.experiments.length;$scope.isLoading=false;if(Cookies.get("currentExperimentID")){$scope.currentExperiment=ExperimentList.getExperiment(Cookies.get("currentExperimentID"))}}return this};this.changeCurrentExperiment=function(experiment_id){$http($rootScope.getHttpRequestConfig("POST","experiment-selection",{headers:{"Content-Type":"application/json; charset=utf-8"},data:$rootScope.getCredentialsParams({experiment_id:experiment_id})})).then(function successCallback(response){if(response.data.valid_experiment){console.info((new Date).toLocaleString()+"CHANGED TO EXPERIMENT "+experiment_id+" SUCCESSFULLY");Cookies.set("currentExperimentID",experiment_id,null,location.pathname);AnalysisList.clearAnalysis();$scope.currentExperiment=ExperimentList.getExperiment(Cookies.get("currentExperimentID"));$dialogs.showSuccessDialog('Now you are working with study "'+ExperimentList.getExperiment(experiment_id).title+'"')}else{showErrorMessage("You are not member of the selected study. Please, contact administrator or study owners to become a member.")}},function errorCallback(response){var message="Failed while changing the current study.";$dialogs.showErrorDialog(message,{logMessage:message+" at ExperimentListController:changeCurrentExperiment."});console.error(response.data);debugger})};this.send_membership_request=function(experiment_id){$scope.setLoading(true);$http($rootScope.getHttpRequestConfig("POST","experiment-member-request",{headers:{"Content-Type":"application/json"},data:$rootScope.getCredentialsParams({experiment_id:experiment_id})})).then(function successCallback(response){$scope.setLoading(false);$dialogs.showSuccessDialog("A new membership request has been sent to the study administrators.")},function errorCallback(response){debugger;$scope.setLoading(false);var message="Failed while sending membership request.";$dialogs.showErrorDialog(message,{logMessage:message+" at ExperimentDetailController:send_membership_request."});console.error(response.data)})};$scope.filterExperiments=function(){$scope.filteredExperiments=0;$scope.user_id=$scope.user_id||Cookies.get("loggedUserID");return function(item){if(item===$scope.currentExperiment){return false}if($scope.show==="my_experiments"){if(!ExperimentList.isOwner(item,$scope.user_id)&&!ExperimentList.isMember(item,$scope.user_id)){return false}}var filterAux,item_tags;for(var i in $scope.filters){filterAux=$scope.filters[i].toLowerCase();item_tags=item.tags.join("");if(!(item.title.toLowerCase().indexOf(filterAux)!==-1||item.experiment_description.toLowerCase().indexOf(filterAux)!==-1||item_tags.toLowerCase().indexOf(filterAux)!==-1)){return false}}$scope.filteredExperiments++;return true}};$scope.getTagColor=function(_tag){var tag=ExperimentList.getTag(_tag);if(tag!==null){return tag.color}return""};$scope.isMember=function(experiment){$scope.user_id=$scope.user_id||Cookies.get("loggedUserID");return ExperimentList.isOwner(experiment,$scope.user_id)||ExperimentList.isMember(experiment,$scope.user_id)};this.filterByTag=function(tag){if(tag!=="All"){var filters=arrayUnique($scope.filters.concat(tag));$scope.filters=ExperimentList.setFilters(filters).getFilters()}};$scope.$on(APP_EVENTS.experimentDeleted,function(){debugger;this.retrieveAnalysisData("",true)});this.showExperimentChooserChangeHandler=function(){this.retrieveExperimentsData($scope.show)};this.applySearchHandler=function(){var filters=arrayUnique($scope.filters.concat($scope.searchFor.split(" ")));$scope.filters=ExperimentList.setFilters(filters).getFilters()};this.removeFilterHandler=function(filter){$scope.filters=ExperimentList.removeFilter(filter).getFilters()};this.showMoreExperimentsHandler=function(){if(window.innerWidth>1500){$scope.visibleExperiments+=10}else if(window.innerWidth>1200){$scope.visibleExperiments+=6}else{$scope.visibleExperiments+=4}$scope.visibleExperiments=Math.min($scope.filteredExperiments,$scope.visibleExperiments)};this.name="ExperimentListController";var me=this;$scope.experiments=ExperimentList.getExperiments();$scope.tags=ExperimentList.getTags();$scope.filters=ExperimentList.getFilters();$scope.filteredExperiments=$scope.experiments.length;if(window.innerWidth>1500){$scope.visibleExperiments=14}else if(window.innerWidth>1200){$scope.visibleExperiments=10}else{$scope.visibleExperiments=6}$scope.visibleExperiments=Math.min($scope.filteredExperiments,$scope.visibleExperiments);if(Cookies.get("currentExperimentID")){$scope.currentExperiment=ExperimentList.getExperiment(Cookies.get("currentExperimentID"))}if($scope.experiments.length===0||$stateParams.force){this.retrieveExperimentsData("my_experiments",true)}});app.controller("ExperimentDetailController",function($state,$rootScope,$scope,$http,$stateParams,$timeout,$dialogs,APP_EVENTS,ExperimentList,TemplateList){this.retrieveExperimentDetails=function(experiment_id,force){$scope.setLoading(true);$scope.model=ExperimentList.getExperiment(experiment_id);if($scope.model===null||force===true){$http($rootScope.getHttpRequestConfig("POST","experiment-info",{headers:{"Content-Type":"application/json"},data:$rootScope.getCredentialsParams({experiment_id:experiment_id})})).then(function successCallback(response){$scope.model=ExperimentList.addExperiment(response.data);ExperimentList.adaptInformation([$scope.model])[0];$scope.setLoading(false)},function errorCallback(response){debugger;var message="Failed while retrieving the details for the study.";$dialogs.showErrorDialog(message,{logMessage:message+" at ExperimentDetailController:retrieveExperimentDetails."});console.error(response.data);$scope.setLoading(false)})}$scope.setLoading(false)};this.send_create_experiment=function(callback_caller,callback_function){$scope.setLoading(true);$http($rootScope.getHttpRequestConfig("POST","experiment-create",{headers:{"Content-Type":"application/json"},data:$rootScope.getCredentialsParams({experiment_json_data:$scope.model})})).then(function successCallback(response){$scope.model.experiment_id=response.data.newID;ExperimentList.addExperiment($scope.model);$rootScope.$broadcast(APP_EVENTS.experimentCreated);$scope.setLoading(false);if(response.data.warning_message!==""){$dialogs.showWarningDialog("Study "+$scope.model.experiment_id+" successfully saved in server, but some problems were detected: "+response.data.warning_message,{title:"Study "+$scope.model.experiment_id+" saved in server"})}else{console.info((new Date).toLocaleString()+"Study "+$scope.model.experiment_id+" successfully saved in server")}callback_caller[callback_function](true)},function errorCallback(response){debugger;var message="Failed while creating a new study.";$dialogs.showErrorDialog(message,{logMessage:message+" at ExperimentDetailController:send_create_experiment."});console.error(response.data);$scope.taskQueue.unshift({command:"create_new_experiment",object:null});$scope.setLoading(false);callback_caller[callback_function](false)})};this.send_update_experiment=function(callback_caller,callback_function){$scope.setLoading(true);$http($rootScope.getHttpRequestConfig("POST","experiment-update",{headers:{"Content-Type":"application/json"},data:$rootScope.getCredentialsParams({experiment_json_data:$scope.model})})).then(function successCallback(response){$scope.setLoading(false);if(response.data.warning_message!==""){$dialogs.showWarningDialog("Study "+$scope.model.experiment_id+" successfully saved in server, but some problems were detected: "+response.data.warning_message,{title:"Study "+$scope.model.experiment_id+" saved in server"})}else{console.info((new Date).toLocaleString()+"Study "+$scope.model.experiment_id+" successfully saved in server")}callback_caller[callback_function](true)},function errorCallback(response){debugger;var message="Failed while updating the study.";$dialogs.showErrorDialog(message,{logMessage:message+" at ExperimentDetailController:send_update_experiment."});console.error(response.data);$scope.taskQueue.unshift({command:"update_experiment",object:null});$scope.setLoading(false);callback_caller[callback_function](false)})};this.send_lock_experiment=function(newViewMode){$scope.setLoading(true);$http($rootScope.getHttpRequestConfig("POST","experiment-lock",{headers:{"Content-Type":"application/json"},data:$rootScope.getCredentialsParams({experiment_id:$scope.model.experiment_id})})).then(function successCallback(response){if(response.data.success){console.info((new Date).toLocaleString()+"object locked successfully");if(newViewMode==="edition"){$scope.initializeCountdownDialogs()}$scope.setViewMode(newViewMode||"view");$scope.setLoading(false)}else{$dialogs.showErrorDialog("Apparently user "+response.data.user_id+" opened this object for editing. </br>Please, try again later. If the problem persists, please contact with tecnical support.",{logMessage:(new Date).toLocaleString()+"EDITION DENIED FOR Study "+$scope.model.experiment_id});$scope.setLoading(false)}},function errorCallback(response){debugger;var message="Failed while sending lock request.";$dialogs.showErrorDialog(message,{logMessage:message+" at ExperimentDetailController:send_lock_experiment."});console.error(response.data);$scope.setLoading(false)});return this};this.send_unlock_experiment=function(callback_caller,callback_function){$scope.setLoading(true);$http($rootScope.getHttpRequestConfig("POST","experiment-unlock",{headers:{"Content-Type":"application/json"},data:$rootScope.getCredentialsParams({experiment_id:$scope.model.experiment_id})})).then(function successCallback(response){console.info((new Date).toLocaleString()+"object unlocked successfully");$scope.setLoading(false);if(callback_caller){callback_caller[callback_function](true)}else{$scope.setViewMode("view",true)}},function errorCallback(response){debugger;var message="Failed while sending unlock request.";$dialogs.showErrorDialog(message,{logMessage:message+" at ExperimentDetailController:send_unlock_experiment."});console.error(response.data);callback_caller[callback_function](false);$scope.setLoading(false)});return this};this.clean_task_queue=function(tasks_queue){console.info((new Date).toLocaleString()+"CLEANING TASK QUEUE");try{if(tasks_queue.length===0){return tasks_queue}if(tasks_queue[0].command==="create_new_experiment"){var tasks_queue_temp=[tasks_queue[0]];return tasks_queue_temp}var tasks_queue_temp=[];tasks_queue_temp.push({command:"update_experiment",object:null});tasks_queue_temp.push({command:"clear_locked_status",object:null});return tasks_queue_temp}catch(error){$dialogs.showErrorDialog("ERROR CLEANING TASK QUEUE: "+error,{soft:false});return tasks_queue}};this.execute_tasks=function(status){var error_message="";var current_task=$scope.getTaskQueue().shift();if(current_task!=null&&status){try{switch(current_task.command){case"create_new_experiment":console.info((new Date).toLocaleString()+"SENDING SAVE NEW study REQUEST TO SERVER");this.send_create_experiment(this,"execute_tasks");console.info((new Date).toLocaleString()+"SAVE NEW study REQUEST SENT TO SERVER");break;case"update_experiment":console.info((new Date).toLocaleString()+"SENDING UPDATE study REQUEST TO SERVER");this.send_update_experiment(this,"execute_tasks");console.info((new Date).toLocaleString()+"UPDATE study REQUEST SENT TO SERVER");break;case"clear_locked_status":console.info((new Date).toLocaleString()+"SENDING UNLOCK study "+$scope.model.experiment_id+" REQUEST TO SERVER");this.send_unlock_experiment(this,"execute_tasks");console.info((new Date).toLocaleString()+"UNLOCK study "+$scope.model.experiment_id+" REQUEST SENT TO SERVER");break;default:status=false;break}}catch(error){error_message=error.message;status=false;$scope.taskQueue.unshift(current_task)}if(!status){$dialogs.showErrorDialog("Failed trying to saved the changes.</br>Please try again.</br>Error: "+error_message)}}else if(status){$scope.setViewMode("view",true);$scope.setLoading(false);$dialogs.showSuccessDialog("Study "+$scope.model.experiment_id+" saved successfully")}else{status=false;$scope.taskQueue.unshift(current_task);$scope.setLoading(false)}};$scope.setViewMode=function(mode,restore){if(mode==="view"){$scope.panel_title="Study details.";$scope.clearCountdownDialogs();if(restore===true){me.retrieveExperimentDetails($scope.model.experiment_id,true)}}else if(mode==="creation"){$scope.panel_title="Study creation.";$scope.addNewTask("create_new_experiment",null)}else if(mode==="edition"){$scope.panel_title="Study edition.";this.addNewTask("clear_locked_status",null)}$scope.viewMode=mode};$scope.initializeCountdownDialogs=function(){console.error("initializeCountdownDialogs NOT IMPLEMENTED")};$scope.clearCountdownDialogs=function(){console.error("cleanCountdownDialogs NOT IMPLEMENTED")};this.deleteExperimentHandler=function(){var me=this;$scope.setLoading(true);var current_user_id=""+Cookies.get("loggedUserID");if(ExperimentList.isOwner($scope.model,current_user_id)||current_user_id==="admin"){$http($rootScope.getHttpRequestConfig("POST","experiment-delete",{headers:{"Content-Type":"application/json; charset=utf-8"},data:$rootScope.getCredentialsParams({experiment_id:$scope.model.experiment_id,loggedUserID:current_user_id})})).then(function successCallback(response){if($scope.model.experiment_id===Cookies.get("currentExperimentID")){Cookies.remove("currentExperimentID",{path:window.location.pathname})}$scope.setLoading(false);$rootScope.$emit(APP_EVENTS.experimentDeleted);$dialogs.showSuccessDialog("The study was successfully deleted.");$state.go("experiments",{force:true})},function errorCallback(response){$scope.setLoading(false);var message="Failed while deleting the study.";$dialogs.showErrorDialog(message,{logMessage:message+" at ExperimentDetailController:deleteExperimentHandler."});console.error(response.data);debugger})}};this.acceptButtonHandler=function(){if(!$scope.experimentForm.$valid){$dialogs.showErrorDialog("Invalid form, please check the form and fill the empty fields.");return false}$scope.setTaskQueue(this.clean_task_queue($scope.getTaskQueue()));this.execute_tasks(true);return this};this.editButtonHandler=function(){var current_user_id=""+Cookies.get("loggedUserID");if(!ExperimentList.isOwner($scope.model,current_user_id)&&current_user_id!=="admin"){console.error((new Date).toLocaleString()+" EDITION REQUEST DENIED. Error message: User "+current_user_id+" has not Edition privileges over the study "+$scope.model.experiment_id);$dialogs.showErrorDialog("Your user is not allowed to edit this study");return}console.info((new Date).toLocaleString()+"SENDING EDIT REQUEST FOR study "+$scope.model.experiment_id+" TO SERVER");this.send_lock_experiment("edition");return this};this.cancelButtonHandler=function(){$scope.clearTaskQueue();if($scope.viewMode==="view"){$state.go("experiments")}else if($scope.viewMode==="edition"){this.send_unlock_experiment()}else{$state.go("experiments")}};this.name="ExperimentDetailController";var me=this;$scope.loadingComplete=false;$scope.model={};$scope.setViewMode($stateParams.viewMode||"view");$scope.getFormTemplate("experiment-form");if($stateParams.experiment_id!==null){this.retrieveExperimentDetails($stateParams.experiment_id)}else{$scope.model.experiment_id="[Autogenerated after saving]";$scope.model.submission_date=new Date;$scope.model.last_edition_date=new Date;$scope.model.experiment_owners=[{user_id:Cookies.get("loggedUserID")}];$scope.model.experiment_members=[];$scope.model.tags=[]}})})();