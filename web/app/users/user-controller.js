(function(){var app=angular.module("users.controllers.user-session",["ang-dialogs","ui.router","users.services.user-list","ui.bootstrap"]);app.controller("UserSessionController",function($state,$rootScope,$scope,$http,$uibModal,$dialogs,APP_EVENTS){this.getCurrentUserDetails=function(){if(!Cookies.get("session")){return}$http($rootScope.getHttpRequestConfig("GET","user-rest",{headers:{"Content-Type":"application/json"},extra:$rootScope.getCredentialsParams()["loggedUserID"]})).then(function successCallback(response){$scope.userInfo.email=response.data.email;$scope.userInfo.user_id=response.data.user_id;$scope.userInfo.role=response.data.role},function errorCallback(response){var message="Failed while getting user's details at UserSessionController:getCurrentUserDetails";console.error(message);console.error(response.data)})};$scope.$on(APP_EVENTS.loginSuccess,function(event,args){$scope.userInfo.email=$rootScope.getCredentialsParams()["loggedUser"]});$scope.$on(APP_EVENTS.logoutSuccess,function(event,args){delete $scope.userInfo.email;delete $scope.userInfo.user_id});this.signFormSubmitHandler=function(){if($scope.isLogin){this.signInButtonHandler()}else{this.signUpButtonHandler()}};this.signInButtonHandler=function(){if($scope.userInfo.email!==""&&$scope.userInfo.password!==""){$http($rootScope.getHttpRequestConfig("POST","user-rest",{headers:{"Content-Type":"application/json"},extra:"session",data:{email:$scope.userInfo.email,password:$scope.userInfo.password}})).then(function successCallback(response){Cookies.remove("session",{path:window.location.pathname});Cookies.remove("loggedUserID",{path:window.location.pathname});$scope.userInfo.email=response.data.email;$scope.userInfo.user_id=response.data.user_id;$scope.userInfo.apicode=btoa(response.data.email+":"+response.data.sessionToken);$scope.userInfo.role=response.data.role;Cookies.set("session",$scope.userInfo.apicode,{expires:1,path:window.location.pathname});Cookies.set("loggedUserID",$scope.userInfo.user_id,{expires:1,path:window.location.pathname});if(response.data.last_experiment_id!==undefined){Cookies.set("currentExperimentID",response.data.last_experiment_id,{expires:1,path:window.location.pathname})}delete $scope.userInfo.password;delete $scope.signForm;$rootScope.$broadcast(APP_EVENTS.loginSuccess);$state.go("home")},function errorCallback(response){if(response.data.code==="00003a"){$dialogs.showErrorDialog("Invalid user or password.");return}debugger;var message="Failed during sign-in process.";$dialogs.showErrorDialog(message,{logMessage:message+" at UserSessionController:signInButtonHandler."});console.error(response.data)})}};this.signUpButtonHandler=function(){if($scope.userInfo.email!==""&&$scope.userInfo.user_id!==""&&$scope.userInfo.password!==""&&$scope.userInfo.password===$scope.userInfo.passconfirm){$http($rootScope.getHttpRequestConfig("POST","user-rest",{headers:{"Content-Type":"application/json"},data:{email:$scope.userInfo.email,user_id:$scope.userInfo.user_id,password:$scope.userInfo.password}})).then(function successCallback(response){if(response.data.success){$dialogs.showSuccessDialog("Your account has been created!");$scope.isLogin=true}else{$dialogs.showErrorDialog("Failed when creating new account: "+response.data.reason)}delete $scope.userInfo.password;delete $scope.userInfo.passconfirm;delete $scope.signForm;Cookies.remove("session",{path:window.location.pathname});Cookies.remove("loggedUserID",{path:window.location.pathname});Cookies.remove("currentExperimentID",{path:window.location.pathname})},function errorCallback(response){debugger;var message="Failed during sign-up process.";$dialogs.showErrorDialog(message,{logMessage:message+" at UserSessionController:signUpButtonHandler."});console.error(response.data)})}};this.signOutButtonHandler=function(){var cleanSessionData=function(){console.log("Cleaning all local session data.");Cookies.remove("session",{path:window.location.pathname});Cookies.remove("loggedUserID",{path:window.location.pathname});Cookies.remove("currentExperimentID",{path:window.location.pathname});delete $scope.userInfo.email;delete $scope.userInfo.user_id;$state.go("signin");$rootScope.$broadcast(APP_EVENTS.logoutSuccess)};$http($rootScope.getHttpRequestConfig("DELETE","user-rest",{headers:{"Content-Type":"application/json"},extra:"session"})).then(function successCallback(response){cleanSessionData()},function errorCallback(response){debugger;var message="Failed during logout process.";$dialogs.showErrorDialog(message,{logMessage:message+" at UserSessionController:signOutButtonHandler."});console.error(response.data);cleanSessionData()})};this.changePasswordButtonHandler=function(){$scope.checkPasswords=function(){if($scope.newpass.newpass.length<6){$scope.newpass.error="Password must be at least 6 characters."}else if($scope.newpass.newpass===$scope.newpass.repeatpass){delete $scope.newpass.error;return true}else{$scope.newpass.error="Passwords do not match."}return false};$scope.closeDialog=function(option){if(option==="ok"){if($scope.checkPasswords()){modalInstance.close()}}else{modalInstance.dismiss()}};$scope.newpass={newpass:"",repeatpass:""};var modalInstance=$uibModal.open({template:""+'<div class="modal-header">'+'   <h3 class="modal-title" id="modal-title">Change password</h3>'+"</div>"+'<div class="modal-body" id="modal-body">'+'<form class="form-inline">'+'  <div class="form-group">'+'    <label  for="newpass">New password:</label>'+'    <input type="password" ng-model="newpass.newpass" ng-change="checkPasswords()" class="form-control" id="newpass">'+"  </div>"+'  <div class="form-group">'+'    <label for="newpass">Repeat:</label>'+'    <input type="password" ng-model="newpass.repeatpass" ng-change="checkPasswords()" class="form-control" id="repeatpass">'+"  </div>"+'  <p class="text-danger" ng-show="newpass.error">{{newpass.error}}</p>'+"</form>"+"</div>"+'<div class="modal-footer">'+'   <a class="btn btn-success" ng-click="closeDialog(\'ok\');">Change password</a>'+'   <a class="btn btn-danger" ng-click="closeDialog();">Cancel</a>'+"</div>",scope:$scope});modalInstance.result.then(function(){$http($rootScope.getHttpRequestConfig("PUT","user-rest",{headers:{"Content-Type":"application/json"},extra:$rootScope.getCredentialsParams()["loggedUserID"],data:{newpass:btoa($scope.newpass.newpass)}})).then(function successCallback(response){$dialogs.showSuccessDialog("Password successfully updated!")},function errorCallback(response){debugger;var message="Failed while changing the password.";$dialogs.showErrorDialog(message,{logMessage:message+" at UserSessionController:changePasswordButtonHandler."});console.error(response.data)});delete $scope.checkPasswords;delete $scope.closeDialog;delete $scope.newpass},function(){delete $scope.checkPasswords;delete $scope.closeDialog;delete $scope.newpass})};this.getAPICodeHandler=function(){$dialogs.showInfoDialog("Your API code is "+Cookies.get("session"),{title:"API code"})};this.sendBackupRequestHandler=function(){$http($rootScope.getHttpRequestConfig("POST","admin-rest",{headers:{"Content-Type":"application/json"},extra:"backup"})).then(function successCallback(response){$dialogs.showSuccessDialog("Backup successfully created!");var file_content=response.data;var saveByteArray=function(){var a=document.createElement("a");document.body.appendChild(a);a.style="display: none";return function(data,name){var blob=new Blob(data,{type:"octet/stream"}),url=window.URL.createObjectURL(blob);a.href=url;a.download=name;a.click();window.URL.revokeObjectURL(url)}}();var filename=response.headers("content-disposition").replace("filename=","").replace(/\"/g,"");saveByteArray([file_content],filename)},function errorCallback(response){debugger;var message="Failed while creating the backup for databases.";$dialogs.showErrorDialog(message,{logMessage:message+" at UserSessionController:sendBackupRequestHandler."});console.error(response.data)})};$scope.userInfo={email:$rootScope.getCredentialsParams()["loggedUser"]};this.getCurrentUserDetails()});app.controller("UserListController",function($state,$rootScope,$scope,$http,$dialogs,$uibModal,UserList){this.retrieveUsersData=function(force){$scope.isLoading=true;if(UserList.getOld()>1||force){$http($rootScope.getHttpRequestConfig("GET","user-rest",{headers:{"Content-Type":"application/json"}})).then(function successCallback(response){$scope.isLoading=false;$scope.users=UserList.setUsers(response.data).getUsers();$scope.filteredUsers=$scope.users.length},function errorCallback(response){$scope.isLoading=false;debugger;var message="Failed while retrieving the users list.";$dialogs.showErrorDialog(message,{logMessage:message+" at UserListController:retrieveUsersData."});console.error(response.data)})}else{$scope.users=UserList.getUsers();$scope.filteredUsers=$scope.users.length;$scope.isLoading=false}return this};$scope.filterUsers=function(){$scope.filteredUsers=0;$scope.username=$scope.username||$rootScope.getCredentialsParams()["loggedUser"];return function(item){if($scope.show==="my_users"){var filterAux,item_tags;for(var i in $scope.filters){filterAux=$scope.filters[i].toLowerCase();item_tags=item.tags.join("");if(!(item.name.toLowerCase().indexOf(filterAux)!==-1||item_tags.toLowerCase().indexOf(filterAux)!==-1)){return false}}$scope.filteredUsers++;return true}}};$scope.isSelectedUser=function(user){if($scope.models!==null){for(var i in $scope.models){if($scope.models[i].user_id===user.user_id){return true}}}return false};this.changeSelectedUsersButtonHandler=function(){$scope.isDialog=true;$scope.browseDialog=$uibModal.open({templateUrl:"app/users/user-list.tpl.html",controller:"UserListController",controllerAs:"controller",scope:$scope});return this};this.closeBrowseDialogHandler=function(){$scope.browseDialog.dismiss("cancel");delete $scope.browseDialog};this.addSelectedUser=function(user){if($scope.models!==null){for(var i in $scope.models){if($scope.models[i].user_id===user.user_id){return this}}$scope.models.push(user)}return this};this.removeSelectedUser=function(user){if($scope.models!==null){for(var i in $scope.models){if($scope.models[i].user_id===user.user_id){$scope.models.splice(i,1);return this}}}return this};this.applySearchHandler=function(){var filters=arrayUnique($scope.filters.concat($scope.searchFor.split(" ")));$scope.filters=UserList.setFilters(filters).getFilters()};this.removeFilterHandler=function(filter){$scope.filters=UserList.removeFilter(filter).getFilters()};var me=this;$scope.users=UserList.getUsers();$scope.filters=UserList.getFilters();$scope.filteredUsers=$scope.users.length;if($scope.users.length===0){this.retrieveUsersData()}})})();