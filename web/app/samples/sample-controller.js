(function(){var app=angular.module("samples.controllers",["ang-dialogs","angular.backtop","samples.services.sample-list","samples.directives.sample-views","templates.directives.template","protocols.services.protocol-list","ui.bootstrap"]);app.controller("SampleListController",function($state,$rootScope,$scope,$http,$stateParams,$uibModal,$dialogs,APP_EVENTS,SampleList){this.retrieveSamplesData=function(group,force,recursive){$scope.setLoading(true);if(SampleList.getOld()>1||force){$http($rootScope.getHttpRequestConfig("GET","samples-rest",{headers:{"Content-Type":"application/json"},extra:"?recursive=1"})).then(function successCallback(response){$scope.samples=SampleList.setSamples(response.data.samples).getSamples();SampleList.checkSamplesInCurrentStudy($scope.samples,response.data.samples_current_study);$scope.tags=SampleList.updateTags().getTags();$scope.filteredSamples=$scope.samples.length;if(window.innerWidth>1500){$scope.visibleSamples=14}else if(window.innerWidth>1200){$scope.visibleSamples=10}else{$scope.visibleSamples=6}$scope.visibleSamples=Math.min($scope.filteredSamples,$scope.visibleSamples);$scope.setLoading(false)},function errorCallback(response){$scope.setLoading(false);debugger;var message="Failed while retrieving the samples list.";$dialogs.showErrorDialog(message,{logMessage:message+" at SampleListController:retrieveSamplesData."});console.error(response.data)})}else{$scope.samples=SampleList.getSamples();$scope.tags=SampleList.getTags();$scope.filteredSamples=$scope.samples.length;$scope.setLoading(false)}return this};$scope.filterSamples=function(){$scope.filteredSamples=0;$scope.user_id=$scope.user_id||Cookies.get("loggedUserID");return function(item){if($scope.show==="samples_current_study"){return item.in_current_study}else if($scope.show==="my_samples"){if(!SampleList.isOwner(item,$scope.user_id)){return false}}else if($scope.show==="all_samples"){if(!item.isPublic){return false}}var filterAux,item_tags;for(var i in $scope.filters){filterAux=$scope.filters[i].toLowerCase();item_tags=item.tags.join("");if(!(item.title.toLowerCase().indexOf(filterAux)!==-1||item.sample_description.toLowerCase().indexOf(filterAux)!==-1||item_tags.toLowerCase().indexOf(filterAux)!==-1)){return false}}$scope.filteredSamples++;return true}};$scope.getTagColor=function(_tag){var tag=SampleList.getTag(_tag);if(tag!==null){return tag.color}return""};$scope.isMember=function(sample){$scope.user_id=$scope.user_id||Cookies.get("loggedUserID");return SampleList.isOwner(sample,$scope.user_id)};$scope.$on(APP_EVENTS.sampleDeleted,function(){debugger;this.retrieveSamplesData("",true)});$scope.$on(APP_EVENTS.sampleCreated,function(){debugger;this.retrieveSamplesData("",true)});this.showSampleChooserChangeHandler=function(){this.retrieveSamplesData($scope.show)};this.applySearchHandler=function(){var filters=arrayUnique($scope.filters.concat($scope.searchFor.split(" ")));$scope.filters=SampleList.setFilters(filters).getFilters()};this.filterByTag=function(tag){if(tag!=="All"){var filters=arrayUnique($scope.filters.concat(tag));$scope.filters=SampleList.setFilters(filters).getFilters()}};this.removeFilterHandler=function(filter){$scope.filters=SampleList.removeFilter(filter).getFilters()};this.showMoreSamplesHandler=function(){if(window.innerWidth>1500){$scope.visibleSamples+=10}else if(window.innerWidth>1200){$scope.visibleSamples+=6}else{$scope.visibleSamples+=4}$scope.visibleSamples=Math.min($scope.filteredSamples,$scope.visibleSamples)};this.name="SampleListController";var me=this;if(!Cookies.get("currentExperimentID")){$dialogs.showInfoDialog('Please, choose first an study at the "Browse studies" section.');$state.go("experiments");return}$scope.samples=SampleList.getSamples();$scope.tags=SampleList.getTags();$scope.filters=SampleList.getFilters();$scope.filteredSamples=$scope.samples.length;if(window.innerWidth>1500){$scope.visibleSamples=14}else if(window.innerWidth>1200){$scope.visibleSamples=10}else{$scope.visibleSamples=6}$scope.visibleSamples=Math.min($scope.filteredSamples,$scope.visibleSamples);if($scope.samples.length===0||$stateParams.force||$scope.force){this.retrieveSamplesData("samples_current_study",true,$scope.recursive)}});app.controller("BioconditionDetailController",function($state,$rootScope,$scope,$http,$stateParams,$timeout,$uibModal,$dialogs,APP_EVENTS,SampleList,TemplateList){this.retrieveSampleDetails=function(biocondition_id,force){$scope.setLoading(true);$scope.model=SampleList.getBiocondition(biocondition_id);if($scope.model===null||$scope.model.bioreplicates===undefined||force===true){$http($rootScope.getHttpRequestConfig("POST","sample-info",{headers:{"Content-Type":"application/json"},data:$rootScope.getCredentialsParams({biocondition_id:biocondition_id,recursive:true})})).then(function successCallback(response){$scope.model=SampleList.addBiocondition(response.data);SampleList.adaptInformation([$scope.model])[0];$scope.diagram=me.generateWorkflowDiagram($scope.model,$scope.diagram);if($scope.bioreplicate_id){$scope.bioreplicate=SampleList.getBioreplicate($scope.model,$scope.bioreplicate_id);if($scope.analytical_rep_id){$scope.analytical_rep=SampleList.getAnalyticalReplicate($scope.bioreplicate,$scope.analytical_rep_id)}}$scope.setLoading(false)},function errorCallback(response){debugger;var message="Failed while retrieving the sample's details.";$dialogs.showErrorDialog(message,{logMessage:message+" at BioconditionDetailController:retrieveSampleDetails."});console.error(response.data);$scope.setLoading(false)})}else{$scope.diagram=me.generateWorkflowDiagram($scope.model,$scope.diagram);$scope.setLoading(false)}};this.send_create_sample=function(callback_caller,callback_function){$scope.setLoading(true);$http($rootScope.getHttpRequestConfig("POST","sample-create",{headers:{"Content-Type":"application/json"},data:$rootScope.getCredentialsParams({biocondition_json_data:$scope.model})})).then(function successCallback(response){console.info((new Date).toLocaleString()+"Sample "+$scope.model.biocondition_id+" successfully saved in server");$scope.model.biocondition_id=response.data.newID;SampleList.addBiocondition($scope.model);$rootScope.$broadcast(APP_EVENTS.sampleCreated);$scope.setLoading(false);callback_caller[callback_function](true)},function errorCallback(response){debugger;var message="Failed while creating a new sample.";$dialogs.showErrorDialog(message,{logMessage:message+" at BioconditionDetailController:send_create_sample."});console.error(response.data);$scope.taskQueue.unshift({command:"create_new_sample",object:null});$scope.setLoading(false);callback_caller[callback_function](false)})};this.send_update_sample=function(callback_caller,callback_function){$scope.setLoading(true);$http($rootScope.getHttpRequestConfig("POST","sample-update",{headers:{"Content-Type":"application/json"},data:$rootScope.getCredentialsParams({biocondition_json_data:$scope.model})})).then(function successCallback(response){console.info((new Date).toLocaleString()+"Sample "+$scope.model.biocondition_id+" successfully updated in server");$rootScope.$broadcast(APP_EVENTS.sampleCreated);$scope.setLoading(false);callback_caller[callback_function](true)},function errorCallback(response){debugger;var message="Failed while updating the sample.";$dialogs.showErrorDialog(message,{logMessage:message+" at BioconditionDetailController:send_update_sample."});console.error(response.data);$scope.taskQueue.unshift({command:"update_sample",object:null});$scope.setLoading(false);callback_caller[callback_function](false)})};this.send_lock_sample=function(newViewMode){$scope.setLoading(true);$http($rootScope.getHttpRequestConfig("POST","sample-lock",{headers:{"Content-Type":"application/json"},data:$rootScope.getCredentialsParams({biocondition_id:$scope.model.biocondition_id})})).then(function successCallback(response){if(response.data.success){console.info((new Date).toLocaleString()+"object locked successfully");if(newViewMode==="edition"){$scope.initializeCountdownDialogs()}$scope.setViewMode(newViewMode||"view");$scope.setLoading(false)}else{$dialogs.showErrorDialog("Apparently user "+response.data.user_id+" opened this object for editing. </br>Please, try again later. If the problem persists, please contact with tecnical support.",{logMessage:(new Date).toLocaleString()+"EDITION DENIED FOR Sample "+$scope.model.biocondition_id});$scope.setLoading(false)}},function errorCallback(response){debugger;var message="Failed while sending lock request.";$dialogs.showErrorDialog(message,{logMessage:message+" at BioconditionDetailController:send_lock_sample."});console.error(response.data);$scope.setLoading(false)});return this};this.send_unlock_sample=function(callback_caller,callback_function){$scope.setLoading(true);$http($rootScope.getHttpRequestConfig("POST","sample-unlock",{headers:{"Content-Type":"application/json"},data:$rootScope.getCredentialsParams({biocondition_id:$scope.model.biocondition_id})})).then(function successCallback(response){console.info((new Date).toLocaleString()+"object unlocked successfully");$scope.setLoading(false);if(callback_caller){callback_caller[callback_function](true)}else{$scope.setViewMode("view",true)}},function errorCallback(response){debugger;var message="Failed while sending unlock request.";$dialogs.showErrorDialog(message,{logMessage:message+" at BioconditionDetailController:send_unlock_sample."});console.error(response.data);callback_caller[callback_function](false);$scope.setLoading(false)});return this};this.clean_task_queue=function(tasks_queue){console.info((new Date).toLocaleString()+"CLEANING TASK QUEUE");try{if(tasks_queue.length===0){return tasks_queue}var tasks_queue_temp;if(tasks_queue[0].command==="create_new_sample"){tasks_queue_temp=[tasks_queue[0]]}else{tasks_queue_temp=[];tasks_queue_temp.push({command:"update_sample",object:null});tasks_queue_temp.push({command:"clear_locked_status",object:null})}return tasks_queue_temp}catch(error){$dialogs.showErrorDialog("ERROR CLEANING TASK QUEUE: "+error,{soft:false});return tasks_queue}};this.execute_tasks=function(status){var error_message="";var current_task=$scope.getTaskQueue().shift();if(current_task!=null&&status){try{switch(current_task.command){case"create_new_sample":console.info((new Date).toLocaleString()+"SENDING SAVE NEW sample REQUEST TO SERVER");this.send_create_sample(this,"execute_tasks");console.info((new Date).toLocaleString()+"SAVE NEW sample REQUEST SENT TO SERVER");break;case"update_sample":console.info((new Date).toLocaleString()+"SENDING UPDATE Sample REQUEST TO SERVER");this.send_update_sample(this,"execute_tasks");console.info((new Date).toLocaleString()+"UPDATE Sample REQUEST SENT TO SERVER");break;case"clear_locked_status":console.info((new Date).toLocaleString()+"SENDING UNLOCK Sample "+$scope.model.biocondition_id+" REQUEST TO SERVER");this.send_unlock_sample(this,"execute_tasks");console.info((new Date).toLocaleString()+"UNLOCK Sample "+$scope.model.biocondition_id+" REQUEST SENT TO SERVER");break;default:status=false;break}}catch(error){error_message=error.message;status=false;$scope.taskQueue.unshift(current_task)}if(!status){$dialogs.showErrorDialog("Failed trying to saved the changes.</br>Please try again.</br>Error: "+error_message)}$scope.setLoading(false)}else if(status){$scope.setViewMode("view",true);$scope.setLoading(false);$dialogs.showSuccessDialog("Sample "+$scope.model.biocondition_id+" saved successfully")}else{status=false;$scope.taskQueue.unshift(current_task);$scope.setLoading(false)}};$scope.setViewMode=function(mode,restore){if(mode==="view"){$scope.panel_title="Sample details.";$scope.clearCountdownDialogs();if(restore===true){me.retrieveSampleDetails($scope.model.biocondition_id,true)}}else if(mode==="creation"){$scope.panel_title="Sample creation.";$scope.addNewTask("create_new_sample",null)}else if(mode==="edition"){$scope.panel_title="Sample edition.";this.addNewTask("clear_locked_status",null)}$scope.viewMode=mode};$scope.initializeCountdownDialogs=function(){console.error("initializeCountdownDialogs NOT IMPLEMENTED")};$scope.clearCountdownDialogs=function(){console.error("cleanCountdownDialogs NOT IMPLEMENTED")};this.generateWorkflowDiagram=function(biocondition,diagram){var sample=null,aliquot=null,edge_id=0,sample_id=0,aliquot_id=0,edges={},nodes={};biocondition=biocondition||$scope.model;try{nodes[0]={id:0,label:biocondition.organism,x:0,y:0,node_type:"specie",size:25};var samples=biocondition.associatedBioreplicates;for(var i in samples){sample=samples[i];if(!sample.status||sample.status.indexOf("deleted")===-1){nodes["s"+sample_id]={id:"s"+sample_id,label:sample.bioreplicate_name,x:0,y:0,node_type:"sample",size:12};edges[edge_id]={id:edge_id,source:0,target:"s"+sample_id,type:"arrow"};edge_id++;var aliquouts=sample.associatedAnalyticalReplicates;for(var j in aliquouts){aliquot=aliquouts[j];if(!aliquot.status||aliquot.status.indexOf("deleted")===-1){nodes["a"+aliquot_id]={id:"a"+aliquot_id,label:aliquot.analytical_rep_name,x:0,y:0,node_type:"aliquot",size:10};edges[edge_id]={id:edge_id,source:"s"+sample_id,target:"a"+aliquot_id,type:"arrow"};edge_id++;aliquot_id++}}sample_id++}}diagram=diagram||$scope.diagram;if(!diagram){diagram={hasChanged:0,nodes:Object.values(nodes),edges:Object.values(edges)}}else{diagram.nodes=Object.values(nodes);diagram.edges=Object.values(edges);diagram.hasChanged++}}catch(e){debugger}return diagram};$scope.$on(APP_EVENTS.samplesChanged,function(){if(!$scope.isModal){$scope.diagram=me.generateWorkflowDiagram($scope.model,$scope.diagram)}});this.deleteBiologicalConditionHandler=function(){var me=this;$scope.setLoading(true);var current_user_id=""+Cookies.get("loggedUserID");if(SampleList.isOwner($scope.model,current_user_id)||current_user_id==="admin"){$http($rootScope.getHttpRequestConfig("POST","sample-delete",{headers:{"Content-Type":"application/json; charset=utf-8"},data:$rootScope.getCredentialsParams({biocondition_id:$scope.model.biocondition_id,loggedUserID:current_user_id})})).then(function successCallback(response){$scope.setLoading(false);$rootScope.$broadcast(APP_EVENTS.sampleDeleted);$dialogs.showSuccessDialog("All the samples were successfully deleted.");$state.go("samples",{force:true})},function errorCallback(response){$scope.setLoading(false);var message="Failed while deleting the samples.";$dialogs.showErrorDialog(message,{logMessage:message+" at SampleDetailController:deleteBiologicalConditionHandler."});console.error(response.data);debugger})}};this.addNewBioreplicateButtonHandler=function(){$scope.model.associatedBioreplicates.push({bioreplicate_name:"",associatedAnalyticalReplicates:[],status:"new"})};this.showSelectedSampleDetailsButtonHandler=function(){$scope.isDialog=true;$scope.browseDialog=$uibModal.open({templateUrl:$scope.model.isExternal?"app/samples/external-sample-form.tpl.html":"app/samples/biocondition-form.tpl.html",controller:$scope.model.isExternal?"ExternalSampleDetailController":"BioconditionDetailController",controllerAs:"controller",size:"lg",scope:$scope});return this};this.changeSelectedSampleButtonHandler=function(){$scope.isDialog=true;$scope.force=true;$scope.recursive=true;$scope.changeSelectedSample=function(sample_id){if(sample_id.indexOf("BC")!==-1&&sample_id!==$scope.biocondition_id){$scope.biocondition_id=sample_id;$scope.model=SampleList.getBiocondition($scope.biocondition_id);delete $scope.bioreplicate_id;delete $scope.bioreplicate;delete $scope.analytical_rep_id;delete $scope.analytical_rep}else if(sample_id.indexOf("BR")!==-1&&sample_id!==$scope.biocondition_id){$scope.bioreplicate_id=sample_id;$scope.bioreplicate=SampleList.getBioreplicate($scope.model,$scope.bioreplicate_id);delete $scope.analytical_rep_id;delete $scope.analytical_rep}else if(sample_id.indexOf("AR")!==-1&&sample_id!==$scope.analytical_rep_id){$scope.analytical_rep_id=sample_id;$scope.analytical_rep=SampleList.getAnalyticalReplicate($scope.bioreplicate,$scope.analytical_rep_id)}if($scope.bioreplicate_id){$scope.browseDialog.current=3}else if($scope.biocondition_id){$scope.browseDialog.current=2}else{$scope.browseDialog.current=1}};$scope.closeSelectionDialog=function(){delete $scope.changeSelectedSample;delete $scope.closeSelectionDialog;if($scope.other_model){if($scope.analytical_rep_id){$scope.other_model.analyticalReplicate_id=$scope.analytical_rep_id}else if($scope.bioreplicate_id){$scope.other_model.analyticalReplicate_id=$scope.bioreplicate_id}else{$scope.other_model.analyticalReplicate_id=$scope.biocondition_id}}$scope.browseDialog.dismiss("cancel");delete $scope.browseDialog};$scope.browseDialog=$uibModal.open({templateUrl:"app/samples/sample-chooser-dialog.tpl.html",controller:"SampleListController",controllerAs:"controller",size:"lg",scope:$scope});if($scope.bioreplicate_id){$scope.browseDialog.current=3}else if($scope.biocondition_id){$scope.browseDialog.current=2}else{$scope.browseDialog.current=1}return this};this.acceptButtonHandler=function(){if(!$scope.bioconditionForm.$valid){$dialogs.showErrorDialog("Invalid form, please check the form and fill the empty fields.");return false}$scope.setLoading(true);$scope.setTaskQueue(this.clean_task_queue($scope.getTaskQueue()));this.execute_tasks(true);return this};this.editButtonHandler=function(){var current_user_id=""+Cookies.get("loggedUserID");if(!SampleList.isOwner($scope.model,current_user_id)&&current_user_id!=="admin"){console.error((new Date).toLocaleString()+" EDITION REQUEST DENIED. Error message: User "+current_user_id+" has not Edition privileges over the Sample "+$scope.model.biocondition_id);$dialogs.showErrorDialog("Your user is not allowed to edit this sample");return}console.info((new Date).toLocaleString()+"SENDING EDIT REQUEST FOR Sample "+$scope.model.biocondition_id+" TO SERVER");this.send_lock_sample("edition");return this};this.cancelButtonHandler=function(){$scope.clearTaskQueue();if($scope.viewMode==="view"){$state.go("samples")}else if($scope.viewMode==="edition"){this.send_unlock_sample()}else{$state.go("samples")}};this.updateMainDiagramHandler=function(){if($scope.diagram){setTimeout(function(){$scope.diagram.hasChanged--;$scope.$digest()},500)}};this.exportSamplesHandler=function(format){var config=$rootScope.getHttpRequestConfig("GET","samples-rest",{extra:"export/"+"?biocondition_id="+$scope.model.biocondition_id+"&format="+format});var a=document.createElement("a");a.href=config.url;a.target="_blank";a.click();return this};this.name="BioconditionDetailController";var me=this;if(!Cookies.get("currentExperimentID")){$dialogs.showInfoDialog('Please, choose first an study at the "Browse studies" section.');$state.go("experiments");return}$scope.loadingComplete=false;if($scope.model&&!$scope.model.biocondition_id){$scope.other_model=$scope.model;if($scope.model.analyticalReplicate_id){$scope.biocondition_id=SampleList.getBioconditionID($scope.model.analyticalReplicate_id);if($scope.biocondition_id!==$scope.model.analyticalReplicate_id){$scope.bioreplicate_id=SampleList.getBioreplicateID($scope.model.analyticalReplicate_id);if($scope.bioreplicate_id!==$scope.model.analyticalReplicate_id){$scope.analytical_rep_id=$scope.model.analyticalReplicate_id}}}}else{$scope.setViewMode($stateParams.viewMode||"view");$scope.getFormTemplate("biocondition-form")}$scope.model={};if($stateParams.biocondition_id||$scope.biocondition_id){this.retrieveSampleDetails($stateParams.biocondition_id||$scope.biocondition_id,true)}else if($stateParams.biocondition_id===null&&$scope.viewMode==="view"){$state.go("samples")}else{$scope.model.biocondition_id="[Autogenerated after saving]";$scope.model.bioreplicates=[];$scope.model.tags=[];$scope.model.owners=[{user_id:Cookies.get("loggedUserID")}];$scope.model.submission_date=new Date;$scope.model.last_edition_date=new Date;$scope.model.associatedBioreplicates=[];$scope.model.files_location=[]}});app.controller("BioreplicateDetailController",function($state,$rootScope,$scope,$http,$uibModal,SampleList,ProtocolList,APP_EVENTS,TemplateList){$scope.getProtocolName=function(protocol_id,ntries){ntries=(ntries||0)+1;var protocol=ProtocolList.getProtocol(protocol_id);if(protocol===null&&ntries<4){console.log("Protocol information not ready, waiting 3 seconds...");setTimeout(function(){$scope.getProtocolName(protocol_id,ntries)},3e3)}else{$scope.protocol_name=protocol!==null?protocol.protocol_name:"Unknown";return $scope.protocol_name}};$scope.getTotalExtractionProcotols=function(){return Object.keys($scope.model.extractionProtocols||{}).length};this.removableModel=function(){return $scope.viewMode!=="view"&&($scope.model.status===undefined||$scope.model.status.indexOf("deleted")===-1)};this.unremovableModel=function(){return $scope.viewMode!=="view"&&($scope.model.status!==undefined&&$scope.model.status.indexOf("deleted")!==-1)};$scope.$watch("model",function(newValues,oldValues,scope){var hasChanged=oldValues.bioreplicate_name!==newValues.bioreplicate_name||oldValues.batch_id!==newValues.batch_id;if(hasChanged){SampleList.updateModelStatus($scope.model,"edited");$rootScope.$broadcast(APP_EVENTS.samplesChanged);return}},true);this.addNewAnalyticalReplicateButtonHandler=function(){$scope.isDialog=true;$scope.force=true;$scope.browseDialog=$uibModal.open({templateUrl:"app/protocols/protocol-chooser-dialog.tpl.html",controller:"ProtocolListController",controllerAs:"controller",size:"lg",scope:$scope});$scope.changeSelectedProtocol=function(protocol_id){$scope.protocol_id=protocol_id};$scope.closeSelectionDialog=function(){delete $scope.changeSelectedProtocol;delete $scope.closeSelectionDialog;$scope.browseDialog.dismiss("cancel");delete $scope.browseDialog;me.addAnalyticalReplicateToProtocolButtonHandler($scope.protocol_id)};return this};this.addAnalyticalReplicateToProtocolButtonHandler=function(protocol_id){$scope.model.associatedAnalyticalReplicates.push({analytical_rep_name:"",protocol_id:protocol_id,status:"new"});SampleList.adaptBioreplicatesInformation([$scope.model])};this.removeBioreplicateHandler=function(){SampleList.updateModelStatus($scope.model,"deleted");for(var i in $scope.model.associatedAnalyticalReplicates){SampleList.updateModelStatus($scope.model.associatedAnalyticalReplicates[i],"deleted")}$rootScope.$broadcast(APP_EVENTS.samplesChanged)};this.unremoveBioreplicateHandler=function(){SampleList.updateModelStatus($scope.model,"undo");for(var i in $scope.model.associatedAnalyticalReplicates){SampleList.updateModelStatus($scope.model.associatedAnalyticalReplicates[i],"undo")}$rootScope.$broadcast(APP_EVENTS.samplesChanged)};var me=this;$scope.getFormTemplate("bioreplicate-form");if($scope.model&&!$scope.model.bioreplicate_id){$scope.model.bioreplicate_id="[Autogenerated after saving]"}});app.controller("AnalyticalReplicateDetailController",function($state,$rootScope,$scope,$http,SampleList,ProtocolList,TemplateList,APP_EVENTS){this.removableModel=function(){return $scope.viewMode!=="view"&&($scope.model.status===undefined||$scope.model.status.indexOf("deleted")===-1)};this.unremovableModel=function(){return $scope.viewMode!=="view"&&($scope.$parent.$parent.model.status===undefined||$scope.$parent.$parent.model.status.indexOf("deleted")===-1)&&($scope.model.status!==undefined&&$scope.model.status.indexOf("deleted")!==-1)};this.removeAnalyticalReplicateHandler=function(){SampleList.updateModelStatus($scope.model,"deleted");$rootScope.$broadcast(APP_EVENTS.samplesChanged)};this.unremoveAnalyticalReplicateHandler=function(){SampleList.updateModelStatus($scope.model,"undo");$rootScope.$broadcast(APP_EVENTS.samplesChanged)};$scope.$watch("model",function(newValues,oldValues,scope){var hasChanged=oldValues.analytical_rep_name!==newValues.analytical_rep_name||oldValues.protocol_id!==newValues.protocol_id;if(hasChanged){SampleList.updateModelStatus($scope.model,"edited");$rootScope.$broadcast(APP_EVENTS.samplesChanged);return}},true);var me=this;if($scope.model&&!$scope.model.analytical_rep_id){$scope.model.analytical_rep_id="[Autogenerated after saving]"}});app.controller("ExternalSampleDetailController",function($state,$rootScope,$scope,$http,$uibModal,$stateParams,$timeout,$dialogs,APP_EVENTS,SampleList,TemplateList){this.retrieveSampleDetails=function(biocondition_id,force){$scope.setLoading(true);$scope.model=SampleList.getBiocondition(biocondition_id);if($scope.model===null||force===true){$http($rootScope.getHttpRequestConfig("POST","sample-info",{headers:{"Content-Type":"application/json"},data:$rootScope.getCredentialsParams({biocondition_id:biocondition_id,recursive:true})})).then(function successCallback(response){$scope.model=SampleList.addBiocondition(response.data);SampleList.adaptInformation([$scope.model])[0];if($scope.model.isExternal===true){me.retrieveExternalSampleDetails()}$scope.setLoading(false)},function errorCallback(response){debugger;var message="Failed while retrieving the sample's details.";$dialogs.showErrorDialog(message,{logMessage:message+" at ExternalSampleDetailController:retrieveSampleDetails."});console.error(response.data);$scope.setLoading(false)})}$scope.setLoading(false)};this.retrieveExternalSampleDetails=function(){var params={biocondition_id:$scope.model.biocondition_id};if($scope.credentials!==undefined&&$scope.credentials.apikey!==undefined&&$scope.credentials.apikey!==""){params.apikey=$scope.credentials.apikey}else if($scope.credentials!==undefined&&$scope.credentials.username!==undefined&&$scope.credentials.username!==""&&$scope.credentials.pass!==undefined&&$scope.credentials.pass!==""){params.credentials=window.btoa($scope.credentials.username+":"+$scope.credentials.pass)}else{this.openCredentialsDialogHandler();return}$scope.setLoading(true);$http($rootScope.getHttpRequestConfig("GET","samples-rest",{extra:"external-sample-details",params:params})).then(function successCallback(response){$scope.setLoading(false);$scope.samplesInfo.sample_details=me.adaptSampleDetails(response.data.sample_details)},function errorCallback(response){$scope.setLoading(false);delete $scope.credentials;var message="Failed while retrieving the details for the sample from the original LIMS.";$dialogs.showErrorDialog(message,{logMessage:message+" at ExternalSampleDetailController:retrieveExternalSampleDetails."});console.error(response.data);debugger})};this.adaptSampleDetails=function(sample_details){if(sample_details===undefined||sample_details===null){return}else if(typeof sample_details==="object"&&!Array.isArray(sample_details)){var name,value,result=[];var field_names=Object.keys(sample_details);for(var i in field_names){name=field_names[i].split(/(?=[A-Z][a-z])/).join(" ");name=name.replace("_"," ");name=name[0].toUpperCase()+name.substr(1).toLowerCase();value=this.adaptSampleDetails(sample_details[field_names[i]]);result.push({name:name,value:value})}return result}else if(typeof sample_details==="object"&&Array.isArray(sample_details)){var value,result=[];for(var i in sample_details){value=this.adaptSampleDetails(sample_details[i]);result.push({value:value})}return result}else{return sample_details}};this.openCredentialsDialogHandler=function(){var lims_name=$scope.model.external_sample_type.replace("_"," ").replace(".json","").toUpperCase();$scope.credentials={dialog_title:"Please enter the credentials for "+lims_name,dialog_url:$scope.model.external_sample_url};$scope.closeCredentialsDialogHandler=function(option){$scope.modalInstance.close();delete $scope.closeCredentialsDialogHandler;delete $scope.modalInstance;if(option==="accept"){me.retrieveExternalSampleDetails()}else{delete $scope.credentials}};$scope.modalInstance=$uibModal.open({templateUrl:"app/users/credentials-input-dialog.tpl.html",scope:$scope,backdrop:"static",size:"md"})};this.getOrganimsList=function(){$http({method:"GET",url:"data/organisms.json"}).success(function(options){$scope.organisms_options=options["organism"]})};this.retrieveExternalSources=function(){$http($rootScope.getHttpRequestConfig("GET","samples-rest",{extra:"external-sources"})).then(function successCallback(response){$scope.samplesInfo.external_sources=response.data.external_sources},function errorCallback(response){var message="Failed while retrieving the list of supported LIMS.";$dialogs.showErrorDialog(message,{logMessage:message+" at ExternalSampleDetailController:retrieveExternalSources."});console.error(response.data);debugger})};this.send_create_sample=function(callback_caller,callback_function){$scope.setLoading(true);var selectedSamples=[];for(var i in $scope.samples){if($scope.samples[i].selected===true){selectedSamples.push({id:$scope.samples[i].id,name:$scope.samples[i].name})}}$http($rootScope.getHttpRequestConfig("POST","samples-rest",{extra:"/external-sample",data:{samples:selectedSamples,model:$scope.model}})).then(function successCallback(response){console.info((new Date).toLocaleString()+"Samples successfully saved in server");$rootScope.$broadcast(APP_EVENTS.sampleCreated);$scope.setLoading(false);callback_caller[callback_function](true)},function errorCallback(response){debugger;var message="Failed while creating a new sample.";$dialogs.showErrorDialog(message,{logMessage:message+" at BioconditionDetailController:send_create_sample."});console.error(response.data);$scope.setLoading(false);$scope.taskQueue.unshift({command:"create_new_sample",object:null});callback_caller[callback_function](false)})};this.send_lock_sample=function(newViewMode){$scope.setLoading(true);$http($rootScope.getHttpRequestConfig("POST","sample-lock",{headers:{"Content-Type":"application/json"},data:$rootScope.getCredentialsParams({biocondition_id:$scope.model.biocondition_id})})).then(function successCallback(response){if(response.data.success){console.info((new Date).toLocaleString()+"object locked successfully");if(newViewMode==="edition"){$scope.initializeCountdownDialogs()}$scope.setViewMode(newViewMode||"view");$scope.setLoading(false)}else{$dialogs.showErrorDialog("Apparently user "+response.data.user_id+" opened this object for editing. </br>Please, try again later. If the problem persists, please contact with tecnical support.",{logMessage:(new Date).toLocaleString()+"EDITION DENIED FOR Sample "+$scope.model.biocondition_id});$scope.setLoading(false)}},function errorCallback(response){debugger;var message="Failed while sending lock request.";$dialogs.showErrorDialog(message,{logMessage:message+" at ExternalSampleDetailController:send_lock_sample."});console.error(response.data);$scope.setLoading(false)});return this};this.send_unlock_sample=function(callback_caller,callback_function){$scope.setLoading(true);$http($rootScope.getHttpRequestConfig("POST","sample-unlock",{headers:{"Content-Type":"application/json"},data:$rootScope.getCredentialsParams({biocondition_id:$scope.model.biocondition_id})})).then(function successCallback(response){console.info((new Date).toLocaleString()+"object unlocked successfully");$scope.setLoading(false);if(callback_caller){callback_caller[callback_function](true)}else{$scope.setViewMode("view",true)}},function errorCallback(response){debugger;var message="Failed while sending unlock request.";$dialogs.showErrorDialog(message,{logMessage:message+" at ExternalSampleDetailController:send_unlock_sample."});console.error(response.data);callback_caller[callback_function](false);$scope.setLoading(false)});return this};this.clean_task_queue=function(tasks_queue){console.info((new Date).toLocaleString()+"CLEANING TASK QUEUE");try{if(tasks_queue.length===0){return tasks_queue}if(tasks_queue[0].command==="create_new_sample"){var tasks_queue_temp=[tasks_queue[0]];return tasks_queue_temp}else{var tasks_queue_temp=[];tasks_queue_temp.push({command:"update_sample",object:null});tasks_queue_temp.push({command:"clear_locked_status",object:null})}return tasks_queue_temp}catch(error){$dialogs.showErrorDialog("ERROR CLEANING TASK QUEUE: "+error,{soft:false});return tasks_queue}};this.execute_tasks=function(status){var error_message="";var current_task=$scope.getTaskQueue().shift();if(current_task!=null&&status){
try{switch(current_task.command){case"create_new_sample":console.info((new Date).toLocaleString()+"SENDING SAVE NEW sample REQUEST TO SERVER");this.send_create_sample(this,"execute_tasks");console.info((new Date).toLocaleString()+"SAVE NEW sample REQUEST SENT TO SERVER");break;case"update_sample":console.info((new Date).toLocaleString()+"SENDING UPDATE Sample REQUEST TO SERVER");console.info((new Date).toLocaleString()+"UPDATE Sample REQUEST SENT TO SERVER");break;case"clear_locked_status":console.info((new Date).toLocaleString()+"SENDING UNLOCK Sample "+$scope.model.biocondition_id+" REQUEST TO SERVER");this.send_unlock_sample(this,"execute_tasks");console.info((new Date).toLocaleString()+"UNLOCK Sample "+$scope.model.biocondition_id+" REQUEST SENT TO SERVER");break;default:status=false;break}}catch(error){error_message=error.message;status=false;$scope.taskQueue.unshift(current_task)}if(!status){$dialogs.showErrorDialog("Failed trying to saved the changes.</br>Please try again.</br>Error: "+error_message)}}else if(status){$scope.setLoading(false);if($scope.viewMode==="edition"){$scope.setViewMode("view",true);$dialogs.showSuccessDialog("Sample "+$scope.model.biocondition_id+" saved successfully")}else if($scope.viewMode==="creation"){$dialogs.showSuccessDialog("Samples registered successfully");$state.go("samples")}}else{status=false;$scope.taskQueue.unshift(current_task);$scope.setLoading(false)}};$scope.setViewMode=function(mode,restore){if(mode==="view"){$scope.panel_title="External sample details.";$scope.clearCountdownDialogs();if(restore===true){me.retrieveSampleDetails($scope.model.biocondition_id,true)}}else if(mode==="creation"){$scope.panel_title="Registering external samples";$scope.addNewTask("create_new_sample",null)}else if(mode==="edition"){$scope.panel_title="External samples edition.";this.addNewTask("clear_locked_status",null)}$scope.viewMode=mode};$scope.initializeCountdownDialogs=function(){console.error("initializeCountdownDialogs NOT IMPLEMENTED")};$scope.clearCountdownDialogs=function(){console.error("cleanCountdownDialogs NOT IMPLEMENTED")};this.getAllExternalSamplesHandler=function(){$scope.setLoading(true);if(!$scope.model.external_sample_type||$scope.model.external_sample_type===""||!$scope.model.external_sample_url||$scope.model.external_sample_url===""){$scope.setLoading(false);return}var params={external_sample_type:$scope.model.external_sample_type,external_sample_url:$scope.model.external_sample_url};if($scope.samplesInfo.apikey!==undefined&&$scope.samplesInfo.apikey!==""){params.apikey=$scope.samplesInfo.apikey}else{params.credentials=window.btoa($scope.samplesInfo.username+":"+$scope.samplesInfo.pwd)}try{$("html, body").animate({scrollTop:$("#external-samples-list").offset().top-60},1e3)}catch(e){}$http($rootScope.getHttpRequestConfig("GET","samples-rest",{extra:"external-samples-list",params:params})).then(function successCallback(response){$scope.setLoading(false);$scope.samples=response.data.samples},function errorCallback(response){$scope.setLoading(false);var message="Failed while retrieving the list of supported LIMS.";$dialogs.showErrorDialog(message,{logMessage:message+" at ExternalSampleDetailController:retrieveExternalSources."});console.error(response.data);debugger})};this.deleteExternalSampleHandler=function(){var me=this;var current_user_id=""+Cookies.get("loggedUserID");if(SampleList.isOwner($scope.model,current_user_id)||current_user_id==="admin"){$http($rootScope.getHttpRequestConfig("POST","sample-delete",{headers:{"Content-Type":"application/json; charset=utf-8"},data:$rootScope.getCredentialsParams({biocondition_id:$scope.model.biocondition_id,loggedUserID:current_user_id})})).then(function successCallback(response){$rootScope.$emit(APP_EVENTS.sampleDeleted);$dialogs.showSuccessDialog("All the samples were successfully deleted.");$state.go("samples",{force:true})},function errorCallback(response){var message="Failed while deleting the samples.";$dialogs.showErrorDialog(message,{logMessage:message+" at ExternalSampleDetailController:deleteExternalSampleHandler."});console.error(response.data);debugger})}};this.acceptButtonHandler=function(){$scope.setLoading(true);var selectedSamples=false;for(var i in $scope.samples){if($scope.samples[i].selected===true){selectedSamples=true;break}}if(!selectedSamples){$scope.setLoading(false);try{$("html, body").animate({scrollTop:$("#external-samples-list").offset().top-60},1e3)}catch(e){}return}if(!$scope.model.organism||$scope.model.organism===""){$scope.setLoading(false);try{$("html, body").animate({scrollTop:$("#external-samples-organism").offset().top-60},1e3)}catch(e){}return}$scope.setTaskQueue(this.clean_task_queue($scope.getTaskQueue()));this.execute_tasks(true);return this};this.editButtonHandler=function(){var current_user_id=""+Cookies.get("loggedUserID");if(!SampleList.isOwner($scope.model,current_user_id)&&current_user_id!=="admin"){console.error((new Date).toLocaleString()+" EDITION REQUEST DENIED. Error message: User "+current_user_id+" has not Edition privileges over the Sample "+$scope.model.biocondition_id);$dialogs.showErrorDialog("Your user is not allowed to edit this sample");return}console.info((new Date).toLocaleString()+"SENDING EDIT REQUEST FOR Sample "+$scope.model.biocondition_id+" TO SERVER");this.send_lock_sample("edition");return this};this.cancelButtonHandler=function(){$scope.clearTaskQueue();if($scope.viewMode==="view"){$state.go("samples")}else if($scope.viewMode==="edition"){this.send_unlock_sample()}else{$state.go("samples")}};this.name="ExternalSampleDetailController";var me=this;$scope.model={};$scope.samplesInfo={};$scope.setViewMode($stateParams.viewMode||"view");$scope.link_input_type="manual";if($stateParams.biocondition_id||$scope.biocondition_id){this.retrieveSampleDetails($stateParams.biocondition_id||$scope.biocondition_id,true)}else{$scope.model.biocondition_id="[Autogenerated after saving]";$scope.model.bioreplicates=[];$scope.model.tags=[];$scope.model.owners=[{user_id:Cookies.get("loggedUserID")}];$scope.model.submission_date=new Date;$scope.model.last_edition_date=new Date;$scope.model.associatedBioreplicates=[];$scope.model.isExternal=true;this.retrieveExternalSources()}this.getOrganimsList()})})();